# .github/workflows/create-release.yml

name: Create Release and Package Sources

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=$(echo ${GITHUB_REF_NAME} | sed 's/^v//')" >> $GITHUB_ENV

      - name: Read package list from file
        id: set_packages
        run: |
          # Read file content, filter out empty lines, and convert newlines to spaces
          PACKAGES_LIST=$(cat release-tarballs.txt | grep -v '^$' | tr '\n' ' ')
          echo "PACKAGES=${PACKAGES_LIST}" >> $GITHUB_ENV

      - name: Create release assets directory
        run: mkdir -p release_assets

      - name: Create source tarballs
        run: |
          for pkg in ${{ env.PACKAGES }};
          do
            if [ -d "$pkg" ]; then
              echo "Packaging ${pkg}..."
              tarball_name="${pkg}-${{ env.VERSION }}.tar.gz"
              # Change directory into the package folder to archive its contents, not the folder itself.
              # This prevents a nested directory structure in the tarball.
              (cd "${pkg}" && git archive --format=tar.gz --prefix="${pkg}-${{ env.VERSION }}/" -o "${OLDPWD}/release_assets/${tarball_name}" HEAD .)
              echo " -> Created release_assets/${tarball_name}"
            else
              echo "Warning: Directory ${pkg} not found, skipping."
            fi
          done

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          generate_release_notes: true
          files: release_assets/*.tar.gz

  # trigger-copr-builds:
  #   name: Trigger COPR Builds
  #   needs: build-and-release
  #   runs-on: ubuntu-latest
  #   # Define your COPR project and chroots here
  #   env:
  #     COPR_PROJECT: "jhuang6451/nabu_fedora_packages_uefi"
  #     COPR_CHROOTS: "fedora-42-aarch64" # Space-separated list, e.g., "fedora-42-aarch64 fedora-rawhide-aarch64"

  #   steps:
  #     - name: Install Copr CLI
  #       run: sudo pip3 install copr-cli

  #     - name: Configure Copr credentials
  #       run: |
  #         mkdir -p ~/.config
  #         echo "[copr-cli]" > ~/.config/copr
  #         echo "login = ${{ secrets.COPR_LOGIN }}" >> ~/.config/copr
  #         echo "username = ${{ secrets.COPR_USERNAME }}" >> ~/.config/copr
  #         echo "token = ${{ secrets.COPR_TOKEN }}" >> ~/.config/copr
  #         echo "copr_url = ${{ secrets.COPR_API_URL }}" >> ~/.config/copr

  #     - name: Check out code to read package list
  #       uses: actions/checkout@v4

  #     - name: Trigger COPR builds for each package
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Used to get the release info
  #       run: |
  #         # Get the tag that triggered this workflow
  #         TAG_NAME="${{ github.ref_name }}"
  #         REPO_URL="https://github.com/${{ github.repository }}.git"

  #         echo "Triggering builds for tag ${TAG_NAME} in COPR project ${{ env.COPR_PROJECT }}"

  #         # Loop through each package in the list
  #         while IFS= read -r package_name;
  #         do
  #           if [ -z "$package_name" ]; then continue; fi # Skip empty lines

  #           SPEC_PATH="${package_name}/${package_name}.spec"
  #           # A special case for kernel
  #           if [ "$package_name" == "kernel-sm8150" ]; then
  #             SPEC_PATH="kernel-sm8150/linux-sm8150.spec"
  #           fi

  #           echo "Submitting build for ${package_name} with spec file ${SPEC_PATH}..."

  #           # Loop through each chroot and submit a build
  #           for chroot in ${{ env.COPR_CHROOTS }};
  #           do
  #             echo "  -> for chroot ${chroot}"
  #             copr-cli build-scm \
  #               --chroot "${chroot}" \
  #               --spec "${SPEC_PATH}" \
  #               --method git \
  #               --git-url "${REPO_URL}" \
  #               --git-commit "${TAG_NAME}" \
  #               "${{ env.COPR_PROJECT }}"
  #           done
  #         done < release-tarballs.txt