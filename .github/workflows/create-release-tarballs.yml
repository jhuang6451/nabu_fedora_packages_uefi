name: Create Release and Trigger Build

on:
  push:
    tags:
      - '*-v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    name: Build and Release
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.get_info.outputs.PACKAGE_NAME }}
      version: ${{ steps.get_info.outputs.VERSION }}
      tag_name: ${{ steps.get_info.outputs.TAG_NAME }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Extract package name and version from tag
        id: get_info
        run: |
          # Ensure this is a tag push, not a branch push for workflow_dispatch
          if [[ ! "${{ github.ref }}" == refs/tags/* ]]; then
            echo "This is not a tag push. Skipping release creation."
            echo "PACKAGE_NAME=" >> $GITHUB_OUTPUT
            exit 0
          fi

          TAG_NAME=${{ github.ref_name }}
          
          # Use rev/cut/rev to handle package names that may contain hyphens
          PKG_NAME=$(echo "${TAG_NAME}" | rev | cut -d'-' -f2- | rev)
          VERSION=$(echo "${TAG_NAME}" | rev | cut -d'-' -f1 | rev | sed 's/v//')
          
          echo "Tag: ${TAG_NAME}"
          echo "Package Name: ${PKG_NAME}"
          echo "Version: ${VERSION}"

          echo "PACKAGE_NAME=${PKG_NAME}" >> $GITHUB_OUTPUT
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "TAG_NAME=${TAG_NAME}" >> $GITHUB_OUTPUT

      - name: Create release assets directory
        run: mkdir -p release_assets

      - name: Create source tarball
        run: |
          PKG_NAME=${{ steps.get_info.outputs.PACKAGE_NAME }}
          VERSION=${{ steps.get_info.outputs.VERSION }}

          echo "Packaging ${PKG_NAME} version ${VERSION}..."
          tarball_name="${PKG_NAME}-${VERSION}.tar.gz"
          
          # Verify the package directory exists
          if [ ! -d "${PKG_NAME}" ]; then
            echo "Error: Directory '${PKG_NAME}' not found!"
            exit 1
          fi

          # Archive the contents of the package directory
          (cd "${PKG_NAME}" && git archive --format=tar.gz --prefix="${PKG_NAME}-${VERSION}/" -o "${OLDPWD}/release_assets/${tarball_name}" HEAD .)
          echo "-> Created release_assets/${tarball_name}"

      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ steps.get_info.outputs.tag_name }}"
          generate_release_notes: true
          files: release_assets/*.tar.gz

  # trigger-copr-builds:
  #   name: Trigger COPR Builds
  #   needs: build-and-release
  #   if: needs.build-and-release.outputs.package_name != ''
  #   runs-on: ubuntu-latest
  #   env:
  #     COPR_PROJECT: "jhuang6451/nabu_fedora_packages_uefi"
  #     COPR_CHROOTS: "fedora-42-aarch64"
  #     PACKAGE_NAME: ${{ needs.build-and-release.outputs.package_name }}
  #     VERSION: ${{ needs.build-and-release.outputs.version }}
  #     TAG_NAME: ${{ needs.build-and-release.outputs.tag_name }}

  #   steps:
  #     - name: Install Copr CLI
  #       run: sudo pip3 install copr-cli

  #     - name: Configure Copr credentials
  #       run: |
  #         mkdir -p ~/.config
  #         echo "[copr-cli]" > ~/.config/copr
  #         echo "login = ${{ secrets.COPR_LOGIN }}" >> ~/.config/copr
  #         echo "username = ${{ secrets.COPR_USERNAME }}" >> ~/.config/copr
  #         echo "token = ${{ secrets.COPR_TOKEN }}" >> ~/.config/copr
  #         echo "copr_url = ${{ secrets.COPR_API_URL }}" >> ~/.config/copr

  #     - name: Check out code
  #       uses: actions/checkout@v4

  #     - name: Trigger COPR build
  #       run: |
  #         REPO_URL="https://github.com/${{ github.repository }}.git"

  #         echo "Triggering build for ${PACKAGE_NAME} tag ${TAG_NAME} in COPR project ${{ env.COPR_PROJECT }}"

  #         SPEC_PATH="${PACKAGE_NAME}/${PACKAGE_NAME}.spec"
  #         # Special case for the kernel package
  #         if [ "$PACKAGE_NAME" == "kernel-sm8150" ]; then
  #           SPEC_PATH="kernel-sm8150/linux-sm8150.spec"
  #         fi

  #         echo "Submitting build for ${PACKAGE_NAME} with spec file ${SPEC_PATH}..."

  #         for chroot in ${{ env.COPR_CHROOTS }};
  #         do
  #           echo "  -> for chroot ${chroot}"
  #           copr-cli build-scm \
  #             --chroot "${chroot}" \
  #             --spec "${SPEC_PATH}" \
  #             --method git \
  #             --git-url "${REPO_URL}" \
  #             --git-commit "${TAG_NAME}" \
  #             --rpmbuild-define "version ${VERSION}" \
  #             "${{ env.COPR_PROJECT }}"
  #         done
